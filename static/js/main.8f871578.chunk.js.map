{"version":3,"sources":["assets/upload.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","pdfDoc","file_name","zip","JSZip","App","useState","tips","setTips","desiredWidth","setDesiredWidth","desiredWidthOption","setDesiredWidthOption","fileType","setFileType","quality","setQuality","downloadBtnStatus","setDownloadBtnStatus","isProcessing","setIsProcessing","processedCount","setProcessedCount","totalCount","setTotalCount","inputEl","useRef","uploadWrapperEl","handleUpload","e","a","preventDefault","fs","dataTransfer","files","target","name","split","type","console","log","pdfjsLib","GlobalWorkerOptions","workerSrc","reader","FileReader","onloadend","getDocument","data","this","result","promise","then","pdfDoc_","numPages","renderPages","readAsArrayBuffer","pageNum","renderPage","canvas","document","createElement","ctx","getContext","getPage","page","viewport","getViewport","scale","width","height","scaledViewport","renderContext","canvasContext","renderTask","render","imgData","toDataURL","file","substring","length","base64","className","htmlFor","role","style","ref","onDragEnter","onDragLeave","current","contains","onDragOver","onDrop","onClick","click","id","onChange","accept","src","require","alt","value","checked","disabled","placeholder","generateAsync","content","saveAs","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f871578.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/upload.d07b4ae7.svg\";","import React, {useRef, useState,} from 'react';\nimport './App.scss';\nimport JSZip from 'jszip';\nimport {saveAs} from 'file-saver';\n\nconst INITIAL_TIPS = '点击选择文件上传 或 拖动图片到此';\nconst HELP_TIPS = '松开鼠标以上传图片'\nlet pdfDoc,file_name;\nconst zip = new JSZip();\n\nfunction App() {\n\n    const [tips, setTips] = useState(INITIAL_TIPS);\n    const [desiredWidth, setDesiredWidth] = useState(1920);\n    const [desiredWidthOption, setDesiredWidthOption] = useState(1);\n    const [fileType, setFileType] = useState('jpeg');\n    const [quality, setQuality] = useState('0.82');\n\n    const [downloadBtnStatus, setDownloadBtnStatus] = useState(true);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [processedCount, setProcessedCount] = useState(0);\n    const [totalCount, setTotalCount] = useState(0);\n    const inputEl = useRef(null);\n    const uploadWrapperEl = useRef(null);\n\n    function handleDragEnter() {\n        setTips(HELP_TIPS)\n    }\n\n    function handleDragLeave(e) {\n        if (e.target !== uploadWrapperEl.current && !uploadWrapperEl.current.contains(e.target)) {\n            setTips(INITIAL_TIPS)\n        }\n    }\n\n    async function handleUpload(e) {\n        e.preventDefault();\n        setTips(INITIAL_TIPS);\n        setIsProcessing(true);\n        const fs = e.dataTransfer ? e.dataTransfer.files : e.target.files;\n        file_name = fs[0].name.split('.')[0];\n        const type = fs[0].type;\n        console.log(type)\n        if (type !== 'application/pdf') return;\n        const pdfjsLib = await import('pdfjs-dist/build/pdf');\n        pdfjsLib.GlobalWorkerOptions.workerSrc = await import('pdfjs-dist/build/pdf.worker.entry');\n\n        let reader = new FileReader();\n        reader.onloadend = function () {\n            pdfjsLib.getDocument({data: this.result}).promise.then(function (pdfDoc_) {\n                pdfDoc = pdfDoc_;\n                setTotalCount(pdfDoc.numPages)\n                renderPages();\n            });\n        }\n        reader.readAsArrayBuffer(fs[0]);\n\n    }\n\n    async function renderPages() {\n        for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {\n            await renderPage(pageNum, zip)\n            setProcessedCount(pageNum);\n        }\n        setDownloadBtnStatus(false)\n    }\n\n    async function renderPage(pageNum, zip) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')\n        const page = await pdfDoc.getPage(pageNum)\n\n        const viewport = page.getViewport({scale: 1,});\n        const scale = desiredWidth / viewport.width;\n        canvas.width = desiredWidth;\n        canvas.height = viewport.height * scale;\n\n        const scaledViewport = page.getViewport({scale: scale,});\n        const renderContext = {\n            canvasContext: ctx,\n            viewport: scaledViewport\n        };\n        const renderTask = page.render(renderContext);\n        await renderTask.promise;\n        const imgData = canvas.toDataURL(`image/${fileType}`, fileType === 'jpeg' ? quality : null);\n        zip.file(pageNum + `.${fileType === 'jpeg' ? 'jpg' : 'png'}`, imgData.substring(`data:image/${fileType};base64,`.length), {base64: true});\n    }\n\n    function downloadImgs() {\n        zip.generateAsync({type: \"blob\"})\n            .then(function (content) {\n                saveAs(content, `${file_name}.zip`);\n            });\n    }\n\n    return (\n        <div className=\"container\">\n            <h2>在线 pdf 转换图片</h2>\n            <div className=\"config\">\n                <div className=\"form-group row\">\n                    <label htmlFor=\"\" className=\"col-sm-2\">上传文件</label>\n\n                    <div className=\"col-sm-10\">\n                        {!isProcessing ?\n                            <div className=\"upload-wrapper\"\n                                 ref={uploadWrapperEl}\n                                 onDragEnter={handleDragEnter}\n                                 onDragLeave={handleDragLeave}\n                                 onDragOver={(e) => {\n                                     e.preventDefault()\n                                 }}\n                                 onDrop={handleUpload}\n                                 onClick={() => {\n                                     inputEl.current.click()\n                                 }}\n                            >\n                                <input ref={inputEl} className=\"uploader\" type=\"file\" name=\"upload\" id=\"upload\"\n                                       onChange={handleUpload} accept=\"application/pdf\"/>\n                                <img src={require('./assets/upload.svg')} alt=\"选择文件\"/>\n                                <div className=\"upload-tips\">{tips}</div>\n                            </div>\n                            :\n                            <div className=\"upload-wrapper\">\n                                <div className=\"progress \">\n                                    <div className=\"progress-bar progress-bar-striped progress-bar-animated\"\n                                         role=\"progressbar\"\n                                         style={{width: `${processedCount / totalCount * 100}%`}}>{processedCount}/{totalCount}</div>\n                                </div>\n                            </div>\n\n                        }\n                    </div>\n\n                </div>\n\n                <div className=\"form-group row\">\n                    <legend className=\"col-form-label col-sm-2 pt-0\">类型</legend>\n                    <div className=\"col-sm-10\">\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"fileType\" id=\"fileType1\"\n                                   value=\"option1\" checked={fileType === 'jpeg'} onChange={() => {\n                                setFileType('jpeg')\n                            }}/>\n                            <label className=\"form-check-label\" htmlFor=\"fileType1\">\n                                jpeg\n                            </label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"fileType\" id=\"fileType2\"\n                                   value=\"option2\" checked={fileType === 'png'} onChange={() => {\n                                setFileType('png')\n                            }}/>\n                            <label className=\"form-check-label\" htmlFor=\"fileType2\">\n                                png\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                {fileType === 'jpeg' &&\n                (<div className=\"form-group row\">\n                    <label className=\"col-sm-2\" htmlFor=\"\">压缩比<br/>(默认0.82)</label>\n                    <div className=\"col-sm-10\">\n                        <input type=\"text\" className=\"form-control\" value={quality} onChange={(e) => {\n                            setQuality(e.target.value)\n                        }}/>\n                    </div>\n                </div>)\n                }\n\n                <div className=\"form-group row\">\n                    <legend className=\"col-form-label col-sm-2 pt-0\">宽度<br/>(高度等比缩放)</legend>\n                    <div className=\"col-sm-10\">\n                        <div className=\"form-check\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"size\" id=\"size1\"\n                                   value=\"option1\" checked={desiredWidthOption === 1} onChange={() => {\n                                setDesiredWidthOption(1)\n                                setDesiredWidth(1920)\n                            }}/>\n                            <label className=\"form-check-label\" htmlFor=\"size1\">\n                                1920\n                            </label>\n                        </div>\n                        <div className=\"form-check\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"size\" id=\"size2\"\n                                   value=\"option2\" checked={desiredWidthOption === 2} onChange={() => {\n                                setDesiredWidthOption(2)\n                                setDesiredWidth(1280)\n                            }}/>\n                            <label className=\"form-check-label\" htmlFor=\"size2\">\n                                1280\n                            </label>\n                        </div>\n                        <div className=\"form-check\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"size\" id=\"size3\"\n                                   value=\"option3\" checked={desiredWidthOption === 3} onChange={() => {\n                                setDesiredWidthOption(3)\n                            }}/>\n                            <input type=\"text\" disabled={desiredWidthOption !== 3} placeholder=\"自定义\"\n                                   className=\"form-control form-control-sm\"\n                                   onChange={(e) => {\n                                       setDesiredWidth(e.target.value)\n                                   }}/>\n                        </div>\n\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <div className=\"col-sm-10 offset-sm-2\">\n                        <button className=\"btn btn-primary btn-lg btn-block\" onClick={downloadImgs}\n                                disabled={downloadBtnStatus}>点击下载\n                        </button>\n                    </div>\n                </div>\n\n\n            </div>\n            <div className=\"process-progress\">\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}